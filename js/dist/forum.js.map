{"version":3,"sources":["webpack://@flagrow/telegram/webpack/bootstrap","webpack://@flagrow/telegram/external \"flarum.core.compat['app']\"","webpack://@flagrow/telegram/external \"flarum.core.compat['extend']\"","webpack://@flagrow/telegram/external \"flarum.core.compat['components/LogInButton']\"","webpack://@flagrow/telegram/external \"flarum.core.compat['models/User']\"","webpack://@flagrow/telegram/external \"flarum.core.compat['Model']\"","webpack://@flagrow/telegram/external \"flarum.core.compat['components/SettingsPage']\"","webpack://@flagrow/telegram/external \"flarum.core.compat['components/LogInButtons']\"","webpack://@flagrow/telegram/external \"flarum.core.compat['components/NotificationGrid']\"","webpack://@flagrow/telegram/./src/forum/index.js","webpack://@flagrow/telegram/./src/forum/addLoginButton.js","webpack://@flagrow/telegram/./src/forum/addNotificationMethod.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","app","initializers","add","User","canReceiveTelegramNotifications","Model","attribute","flagrowTelegramError","extend","LogInButtons","items","LogInButton_default","a","className","icon","path","translator","trans","NotificationGrid","forum","user","session","label","SettingsPage","style","botUsername","view","href","username"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['components/LogInButton'];","module.exports = flarum.core.compat['models/User'];","module.exports = flarum.core.compat['Model'];","module.exports = flarum.core.compat['components/SettingsPage'];","module.exports = flarum.core.compat['components/LogInButtons'];","module.exports = flarum.core.compat['components/NotificationGrid'];","import app from 'flarum/app';\nimport User from 'flarum/models/User';\nimport Model from 'flarum/Model';\nimport addLoginButton from './addLoginButton';\nimport addNotificationMethod from './addNotificationMethod';\n\n\napp.initializers.add('flagrow-telegram', () => {\n    User.prototype.canReceiveTelegramNotifications = Model.attribute('canReceiveTelegramNotifications');\n    User.prototype.flagrowTelegramError = Model.attribute('flagrowTelegramError');\n\n    addLoginButton();\n    addNotificationMethod();\n});\n","import {extend} from 'flarum/extend';\nimport app from 'flarum/app';\nimport LogInButtons from 'flarum/components/LogInButtons';\nimport LogInButton from 'flarum/components/LogInButton';\n\nexport default function () {\n    extend(LogInButtons.prototype, 'items', function (items) {\n        items.add('flagrow-telegram',\n            <LogInButton\n                className=\"Button LogInButton--telegram\"\n                icon=\"fab fa-telegram-plane\"\n                path=\"/auth/telegram\">\n                {app.translator.trans('flagrow-telegram.forum.log_in_with_telegram_button')}\n            </LogInButton>\n        );\n    });\n}\n","import {extend} from 'flarum/extend';\nimport app from 'flarum/app';\nimport NotificationGrid from 'flarum/components/NotificationGrid';\nimport SettingsPage from 'flarum/components/SettingsPage';\nimport LogInButton from 'flarum/components/LogInButton';\n\nexport default function () {\n    extend(NotificationGrid.prototype, 'notificationMethods', function (items) {\n        if (!app.forum.attribute('flagrow-telegram.enableNotifications')) {\n            return;\n        }\n\n        let user = app.session.user;\n        if (!user || !user.canReceiveTelegramNotifications()) {\n            return;\n        }\n\n        // Add telegram notifications method column\n        items.add('telegram', {\n            name: 'telegram',\n            icon: 'fab fa-telegram-plane',\n            label: app.translator.trans('flagrow-telegram.forum.settings.notify_by_telegram_heading'),\n        });\n    });\n    extend(SettingsPage.prototype, 'accountItems', function (items) {\n        if (!app.forum.attribute('flagrow-telegram.enableNotifications')) {\n            return;\n        }\n        let user = app.session.user;\n        if (user && !user.canReceiveTelegramNotifications()) {\n            // add button to link current account with telegram\n            items.add('flagrow-telegram',\n                <div>\n                    <LogInButton\n                        className=\"Button LogInButton--telegram\"\n                        style=\"display:inline-block; width:auto\"\n                        icon=\"fab fa-telegram-plane\"\n                        path=\"/auth/telegram\">\n                        {app.translator.trans('flagrow-telegram.forum.link_telegram_button')}\n                    </LogInButton>\n                </div>\n            );\n        }\n    });\n    extend(SettingsPage.prototype, 'notificationsItems', function (items) {\n\n        if (!app.forum.attribute('flagrow-telegram.enableNotifications')) {\n            return;\n        }\n\n        let user = app.session.user;\n        if (!user || !user.flagrowTelegramError()) {\n            return;\n        }\n\n        const botUsername = app.forum.attribute('flagrow-telegram.botUsername');\n\n        items.add('flagrowTelegramError', {\n            view() {\n                return m('.Alert', m('p', app.translator.trans('flagrow-telegram.forum.settings.unblock_telegram_bot', {\n                    a: m('a', {href: 'https://t.me/' + botUsername}),\n                    username: '@' + botUsername,\n                })))\n            },\n        });\n    });\n}\n\n\n"],"sourceRoot":""} 